#include <esp_partition.h>
#include <LittleFS.h>


void partloop(esp_partition_type_t part_type) {
  esp_partition_iterator_t iterator = NULL;
  const esp_partition_t *next_partition = NULL;
  iterator = esp_partition_find(part_type, ESP_PARTITION_SUBTYPE_ANY, NULL);
  while (iterator) {
     next_partition = esp_partition_get(iterator);
     if (next_partition != NULL) {
        Serial.printf("partition addr: 0x%06x; size: 0x%06x; label: %s\n", next_partition->address, next_partition->size, next_partition->label);  
     iterator = esp_partition_next(iterator);
    }
  }
  esp_partition_iterator_release(iterator);
}

 
void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
    Serial.printf("Listing directory: %s\r\n", dirname);

    File root = fs.open(dirname);
    if(!root){
        Serial.println("- failed to open directory");
        return;
    }
    if(!root.isDirectory()){
        Serial.println(" - not a directory");
        return;
    }

    File file = root.openNextFile();
    while(file){
        if(file.isDirectory()){
            Serial.print("  DIR : ");
            Serial.println(file.name());
            if(levels){
                listDir(fs, file.name(), levels -1);
            }
        } else {
            Serial.print("  FILE: ");
            Serial.print(file.name());
            Serial.print("\tSIZE: ");
            Serial.println(file.size());
        }
	file.close();
        file = root.openNextFile();
    }
}

  Serial.println("Partition list:");
  partloop(ESP_PARTITION_TYPE_ANY);
  // Serial.println("DATA Partition list:");
  // partloop(ESP_PARTITION_TYPE_DATA);
  // Serial.println("APP Partition list:");
  // partloop(ESP_PARTITION_TYPE_APP);

  delay(1000);
  Serial.println("\n\nTrying to mount data partition if present");

  // Only allow one file to be open at a time instead of 10, saving 9x4 - 36KB of RAM
  if (!LittleFS.begin(false, "/littlefs", 10, "spiffs")) {
      Serial.println("LittleFS Mount Failed");
      return;
  }

  Serial.println("File system mounted");
  Serial.printf("Total space: %10lu\n", LittleFS.totalBytes());
  Serial.printf("Used space:  %10lu\n\n", LittleFS.usedBytes());
  listDir(LittleFS, "/", 5);



  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setCursor(0, 0, 2);     // font #2
  tft.setTextSize(1);         // font multiplier = 1
  tft.println("This is a test.");
  tft.setTextSize(2);         // font multiplier = 2
  tft.printf("Screen is: %dW x %dH\n", scrW, scrH);
